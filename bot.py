import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ContentType, ParseMode
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=ParseMode.HTML)
dp = Dispatcher()

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def get_main_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row(KeyboardButton("üîã –ó–∞–ø—Ä–∞–≤–∏—Ç–∏—Å—å"), KeyboardButton("üìã –ú–æ—ó –∑–∞—è–≤–∫–∏"))
    menu.row(KeyboardButton("üí∞ –ê–∫—Ç—É–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞"), KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return menu

# –ú–µ–Ω—é –ê–ó–°
def get_fuel_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row(KeyboardButton("–ê–ó–° ‚Ññ1"), KeyboardButton("–ê–ó–° ‚Ññ2"), KeyboardButton("–ê–ó–° ‚Ññ3"))
    return menu

# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É –ª—ñ—Ç—Ä–∞–∂—É
def get_liters_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row(KeyboardButton("10 –ª"), KeyboardButton("20 –ª"), KeyboardButton("50 –ª"))
    menu.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return menu

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(Command("start"))
async def start_command(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üì± –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    )
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç, {hbold(message.from_user.full_name)}! –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è, –ø–æ–¥—ñ–ª–∏—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=keyboard
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@dp.message(F.content_type == ContentType.CONTACT)
async def phone_handler(message: types.Message):
    user_phone = message.contact.phone_number
    await message.answer("–î—è–∫—É—é! –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞.", reply_markup=get_main_menu())

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—Ä–∞–≤–∏—Ç–∏—Å—å"
@dp.message(F.text == "üîã –ó–∞–ø—Ä–∞–≤–∏—Ç–∏—Å—å")
async def request_fuel(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞–ø—Ä–∞–≤–∫—É:", reply_markup=get_fuel_menu())

# –í–∏–±—ñ—Ä –ª—ñ—Ç—Ä–∞–∂—É –ø—ñ—Å–ª—è –ê–ó–°
@dp.message(F.text.in_(["–ê–ó–° ‚Ññ1", "–ê–ó–° ‚Ññ2", "–ê–ó–° ‚Ññ3"]))
async def select_liters(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç—Ä—ñ–≤:", reply_markup=get_liters_menu())

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.message(F.text.in_(["10 –ª", "20 –ª", "50 –ª"]))
async def confirm_order(message: types.Message):
    await message.answer(f"‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ {message.text} –ø–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–π–Ω—è—Ç–∞!", reply_markup=get_main_menu())

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ—ó –∑–∞—è–≤–∫–∏"
@dp.message(F.text == "üìã –ú–æ—ó –∑–∞—è–≤–∫–∏")
async def my_orders(message: types.Message):
    await message.answer("–£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫.")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç—É–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞"
@dp.message(F.text == "üí∞ –ê–∫—Ç—É–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞")
async def fuel_price(message: types.Message):
    await message.answer("–°—å–æ–≥–æ–¥–Ω—ñ —Ü—ñ–Ω–∞ –ø–∞–ª—å–Ω–æ–≥–æ: 45 –≥—Ä–Ω/–ª")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–ø–æ–º–æ–≥–∞"
@dp.message(F.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
async def help_info(message: types.Message):
    await message.answer("–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–∞–ø—Ä–∞–≤–∏—Ç–∏ –∞–≤—Ç–æ! –û–±–µ—Ä–∏ '–ó–∞–ø—Ä–∞–≤–∏—Ç–∏—Å—å' —Ç–∞ —Å–ª—ñ–¥—É–π —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
